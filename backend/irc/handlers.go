package irc

import (
	"github.com/ergochat/irc-go/ircevent"
)

func AddCallbacks(connection *Server, updateTrigger UpdateTrigger,
	notificationManager NotificationManager, timestampFormat string) {
	connection.AddCallback(
		"JOIN",
		HandleSelfJoin(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.GetChannelByName,
			connection.AddChannel,
			connection.HasCapability,
			connection.SendRaw,
		),
	)
	connection.AddCallback(
		"JOIN",
		HandleOtherJoin(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.GetChannelByName,
		),
	)
	connection.AddCallback(
		"PRIVMSG",
		HandlePrivMsg(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.IsValidChannel,
			connection.GetChannelByName,
			connection.CurrentNick,
			connection.GetName,
			connection.GetID,
			notificationManager.CheckAndNotify,
			connection.GetQueryByName,
			connection.AddQuery,
		),
	)
	connection.AddCallback(
		"PRIVMSG",
		HandleCTCPQuery(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.SendRaw,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		"NOTICE",
		HandleNotice(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.AddMessage,
			connection.IsValidChannel,
			connection.GetChannelByName,
			connection.GetQueryByName,
			connection.AddQuery,
		),
	)
	connection.AddCallback(
		"NOTICE",
		HandleCTCPReply(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_TOPIC,
		HandleRPLTopic(
			updateTrigger.SetPendingUpdate,
			connection.GetName,
			connection.GetChannels,
		),
	)
	connection.AddCallback(
		"333",
		HandleRPLTopicWhoTime(
			updateTrigger.SetPendingUpdate,
			connection.GetName,
			connection.GetChannelByName,
		),
	)
	connection.AddCallback(
		"TOPIC",
		HandleTopic(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.GetChannelByName,
			connection.GetName,
			connection.CurrentNick,
		),
	)
	connection.AddConnectCallback(
		HandleConnected(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.GetQueries,
			connection.GetName,
			connection.ISupport,
			connection.SetName,
			connection.GetChannels,
			connection.AddMessage,
		),
	)
	connection.AddDisconnectCallback(
		HandleDisconnected(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.GetQueries,
			connection.GetName,
			connection.GetChannels,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		"PART",
		HandlePart(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.GetChannelByName,
			connection.RemoveChannel,
		),
	)
	connection.AddCallback(
		"KICK",
		HandleKick(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.GetChannelByName,
			connection.RemoveChannel,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_NAMREPLY,
		HandleNamesReply(
			updateTrigger.SetPendingUpdate,
			connection.GetChannelByName,
			connection.GetModePrefixes,
		),
	)
	connection.AddCallback(
		ircevent.RPL_UMODEIS,
		HandleUserModeSet(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.SetCurrentModes,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		"ERROR",
		HandleError(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISUSER,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISCERTFP,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISACCOUNT,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISBOT,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISACTUALLY,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISCHANNELS,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISIDLE,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISMODES,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISOPERATOR,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISSECURE,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_WHOISSERVER,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.RPL_ENDOFWHOIS,
		HandleWhois(
			timestampFormat,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		"MODE",
		HandleChannelModes(
			timestampFormat,
			connection.IsValidChannel,
			updateTrigger.SetPendingUpdate,
			connection.GetChannelByName,
			connection.GetModeNameForMode,
			connection.GetChannelModeType,
		),
	)
	connection.AddCallback(
		"MODE",
		HandleUserModes(
			timestampFormat,
			connection.IsValidChannel,
			updateTrigger.SetPendingUpdate,
			connection.GetCurrentModes,
			connection.SetCurrentModes,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		"QUIT",
		HandleQuit(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.GetChannels,
		),
	)
	connection.AddCallback(
		"NICK",
		HandleNick(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.CurrentNick,
			connection.AddMessage,
			connection.GetChannels,
		),
	)
	connection.AddBatchCallback(HandleBatch())
	connection.AddCallback(
		ircevent.ERR_NICKNAMEINUSE,
		HandleNickInUse(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.AddMessage,
		),
	)
	connection.AddCallback(
		ircevent.ERR_PASSWDMISMATCH,
		HandlePasswordMismatch(
			timestampFormat,
			updateTrigger.SetPendingUpdate,
			connection.AddMessage,
		),
	)
}
